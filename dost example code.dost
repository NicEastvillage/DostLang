/* Some interpreted language */

var a = 23 						// type inference

fun foo (int v) {               // fun decl, but actually just a const-declaration, which allows for recursion
	print "Parameter: " + v
}

foo(5)
foo = fun (int v) {				// var-decl to declare function, recursion not possible
	print "Value:" + (v + a)
}

var bar = foo
bar(5)


var arr = [10 int] 					// empty int array with size of 10
// arr = [(5 + a) int]				// dynamically allocated array of size (5 + a) - NOT SUPPORTED YET
arr = [5 int : 45, 3, 1, 4, 0]  	// array of size 5 with values
arr = [5 int :: i * 2 ] 			// array of size 5 with an expression generating values, i is index
var length = #arr 					// #arr evaluate to size of arr
var first = arr[0]
var last = arr[-1]
// var error = arr[1000]            // Runtime error since index is out of bounds
// var error = arr[-1000]           // Runtime error since index is out of bounds

arr[5] = foo(first)

for (x in 0 .. #arr) {				// #arr is excluded
	for (y in 0 ..= 9) {				// 9 is included
		first++						// this is a statement, not an expression ?

		for (z : 10 ``= 0)  {		// count down instead, 0 included
			a--
		}
	}
}

while (false) {
	print "@ping!"
	println " are you there?"
}

if (true) {
	a++
} else if (false) {
	a--
} else {
	a = a * 2
}

fun twice (int -> () baz, int v) {
	baz(v)
	baz(v)
}

twice(foo)
twice(fun (int v) int { a = a + 2 })

fun ping () int {
	return pong()			// Not okay, since 'pong' is undeclared
}

fun pong () int {
	return ping()
}

fun outer () int {              // Returns 0 even when nested functions contains return-statements
    var inner = fun () int {
        return 999
    }
    fun inner2 () int {
        return -1
    }
    inner()
    inner2()
    return 0
}